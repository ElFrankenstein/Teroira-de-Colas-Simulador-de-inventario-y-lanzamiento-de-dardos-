
import java.awt.Color;  // Esta importación permite utilizar la clase Color del paquete, proporciona la funcionalidad para trabajar con colores en la interfaz gráfica.
import javax.swing.JOptionPane; //Permite utilizar la clase JOptionPane del paquete javax.swing, que proporciona ventanas de diálogo para mostrar mensajes y recibir entrada del usuario.
import static java.lang.Integer.parseInt; //importando el método estático parseInt de la clase Integer en el paquete java.lang. Este método se utiliza para convertir una cadena en un valor entero.
import java.util.logging.Level; //importaciones pertenecen al paquete java.util.logging y se utilizan para realizar el registro y seguimiento de mensajes en la aplicación
import java.util.logging.Logger; //
import javax.swing.table.DefaultTableModel; //Esta importación permite utilizar la clase DefaultTableModel del paquete javax.swing.table, que proporciona un modelo de tabla predeterminado para trabajar con tablas en la interfaz gráfica.
import java.util.PriorityQueue; // importaciones pertenecen al paquete java.util y se utilizan para crear y manipular una cola de prioridad (PriorityQueue) y una interfaz de cola genérica (Queue) respectivamente. En el código, se utiliza PriorityQueue para implementar la cola de procesos con prioridad. 
import java.util.Queue;
import javax.swing.SwingUtilities; // Permite utilizar la clase SwingUtilities del paquete javax.swing, que proporciona diversas utilidades relacionadas con la interfaz gráfica de Swing, incluyendo la ejecución de tareas en el hilo de eventos de Swing.

/**
 * simulación simplificada de la planificación de procesos utilizando una cola
 * de prioridad, con una interfaz gráfica de usuario construida utilizando
 * componentes Java Swing. Modela la ejecución de procesos y muestra su progreso
 * y resultados.
 *
 * @author jfaneite
 */

/*La clase Procesar extiende javax.swing.JFrame y representa la ventana principal de la aplicación.
La clase contiene diversas variables de instancia para gestionar el estado de la aplicación, incluyendo 
contadores, detalles de procesos, una cola de procesos (colaProcesos) y el proceso que se está ejecutando 
actualmente (procesoEjecutando).*/
public class Procesar extends javax.swing.JFrame {

    int Contador;//Contador del total de procesos que se van ingresando
    int NProceso;//Carga el número de procesos ejecutándose
    int Rafaga = 0;//Carga la ráfaga en ejecución
    int Quantum = 0;//Carga el quantum en ejecución
    int ResiduoRafaga = 0;//Carga el residuo en ejecución
    int TiempoProceso = 0;//Carga el tiempo que se dura procesando
    int ValorBarra;//Carga el progreso de la Barra
    int CantidadProcesos;//Número de procesos terminados
    Queue<Proceso> colaProcesos = new PriorityQueue<>(); // Cola de procesos con prioridad
    Proceso procesoEjecutando; // Proceso en ejecución

    /**
     * Creates new form Procesar
     */
    public Procesar() {
        initComponents();
        jTIngreso.setBackground(Color.CYAN);
        jTIngreso.setForeground(Color.blue);
        jTFinal.setBackground(Color.GREEN);
        //jTFinal.setBackground(Color.red);
        jTFCapturaQuantum.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jBAgregar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTIngreso = new javax.swing.JTable();
        jTFCapturaQuantum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTFCapturaRafaga = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPBEstado = new javax.swing.JProgressBar();
        jBIniciar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLNumeroProceso = new javax.swing.JTextField();
        jLPorcentajeProceso = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLCantidadProcesos = new javax.swing.JTextField();
        jLCantidadTiempo = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTFinal = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        fonfo = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Quantum");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 79, -1));

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });
        getContentPane().add(jBAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 81, -1));

        jTIngreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#Proceso", "Rafaga", "Quantum", "ResiduoRafaga", "Estado"
            }
        ));
        jScrollPane3.setViewportView(jTIngreso);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 560, 116));

        jTFCapturaQuantum.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFCapturaQuantum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCapturaQuantumActionPerformed(evt);
            }
        });
        getContentPane().add(jTFCapturaQuantum, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 79, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Rafaga");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 74, -1));

        jTFCapturaRafaga.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFCapturaRafaga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCapturaRafagaActionPerformed(evt);
            }
        });
        getContentPane().add(jTFCapturaRafaga, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 114, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("        LISTA DE PROCESOS");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 265, 29));

        jPBEstado.setBackground(java.awt.SystemColor.textHighlight);
        jPBEstado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPBEstado.setForeground(new java.awt.Color(0, 51, 255));
        jPBEstado.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 255)));
        getContentPane().add(jPBEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, 304, 21));

        jBIniciar.setText("Iniciar");
        jBIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(jBIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, 81, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("        HISTORICO PROCESOS");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, 277, 24));

        jLNumeroProceso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLNumeroProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLNumeroProcesoActionPerformed(evt);
            }
        });
        getContentPane().add(jLNumeroProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 41, -1));

        jLPorcentajeProceso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLPorcentajeProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLPorcentajeProcesoActionPerformed(evt);
            }
        });
        getContentPane().add(jLPorcentajeProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, 53, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("CANTIDAD PROCESO");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 340, 141, 17));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("TIEMPO PROCESO");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 370, 141, 20));

        jLCantidadProcesos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLCantidadProcesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLCantidadProcesosActionPerformed(evt);
            }
        });
        getContentPane().add(jLCantidadProcesos, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, 118, -1));

        jLCantidadTiempo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLCantidadTiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLCantidadTiempoActionPerformed(evt);
            }
        });
        getContentPane().add(jLCantidadTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 370, 118, -1));

        jTFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#Proceso", "Rafaga", "Quantum", "Tiempo Final"
            }
        ));
        jScrollPane4.setViewportView(jTFinal);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 560, 133));

        jLabel7.setText("Proceso");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, -1, -1));

        fonfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fonfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/DSC01962.JPG"))); // NOI18N
        fonfo.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/ujap.jpeg"))); // NOI18N
        fonfo.setFocusable(false);
        getContentPane().add(fonfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        // TODO add your handling code here:
        if ((Integer.parseInt(jTFCapturaRafaga.getText())) <= 100) {
            Ingresar();
            jTFCapturaQuantum.setEditable(false);
        } else {
            JOptionPane.showMessageDialog(null, "Las Rafagas no pueden ser mayores de 100");
            jTFCapturaRafaga.setText(null);
            jTFCapturaRafaga.grabFocus();
        }

    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jTFCapturaRafagaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCapturaRafagaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCapturaRafagaActionPerformed

    private void jBIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBIniciarActionPerformed

        new Thread(new Hilo()).start(); //Crea un nuevo hilo
        Iniciar();
    }//GEN-LAST:event_jBIniciarActionPerformed

    private void jTFCapturaQuantumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCapturaQuantumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCapturaQuantumActionPerformed

    private void jLCantidadProcesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLCantidadProcesosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLCantidadProcesosActionPerformed

    private void jLCantidadTiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLCantidadTiempoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLCantidadTiempoActionPerformed

    private void jLNumeroProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLNumeroProcesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLNumeroProcesoActionPerformed

    private void jLPorcentajeProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLPorcentajeProcesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLPorcentajeProcesoActionPerformed

    /**
     * El método main() inicia la aplicación Swing creando una instancia de la
     * clase Procesar.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Procesar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Procesar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Procesar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Procesar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Procesar().setVisible(true);
            }
        });
    }

    /*La clase interna Hilo es una clase anidada que implementa la interfaz Runnable. 
    Esta clase simula la ejecución de procesos en un hilo separado.*/
    private class Hilo implements Runnable {

        @Override

        /*En el método run() de Hilo: El hilo entra en un bucle mientras haya procesos en la cola (colaProcesos).
Se obtiene el próximo proceso a ejecutar de la cola usando el método poll().
Si el proceso obtenido no es nulo, comienza la simulación de ejecución del proceso.
Se decrementa el tiempo de ráfaga restante del proceso en un bucle hasta que llega a cero.
Se actualiza la interfaz de usuario para mostrar el proceso como "Procesando" y se actualiza la barra de progreso.
Se incrementa el tiempo de ejecución del proceso (TiempoProceso) y se introduce un retraso (Dormir()).
Después de que el proceso finaliza, se marca como "Terminado" y se registran sus detalles en la tabla de 
procesos finales (jTFinal). Se actualiza la interfaz de usuario con la información de terminación y se elimina 
el proceso de la cola.*/
        public void run() {
            while (!colaProcesos.isEmpty()) {
                procesoEjecutando = colaProcesos.poll();
                if (procesoEjecutando != null) { // Verificar si procesoEjecutando es nulo
                    int rafaga = procesoEjecutando.getRafaga();
                    int residuoRafaga = procesoEjecutando.getResiduoRafaga();
                    int valorBarra;

                    // Actualiza el número de proceso actual en jLNumeroProceso
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            jLNumeroProceso.setText(String.valueOf(procesoEjecutando.getNumero() + 1));
                        }
                    });

                    while (residuoRafaga > 0) {
                        if (procesoEjecutando != null) { // Verificar de nuevo antes de actualizar la tabla
                            jTIngreso.setValueAt("Procesando", procesoEjecutando.getNumero(), 4);
                            residuoRafaga--;
                            Barra(rafaga, residuoRafaga);
                            Pintar();
                            jTIngreso.setValueAt(String.valueOf(residuoRafaga), procesoEjecutando.getNumero(), 3);
                            TiempoProceso++;
                            Dormir();
                        }
                    }

                    if (procesoEjecutando != null) { // Verificar antes de actualizar la tabla
                        jTIngreso.setValueAt("Terminado", procesoEjecutando.getNumero(), 4);
                        Pintar();
                        Informe(procesoEjecutando.getNumero());
                        Borrar(procesoEjecutando.getNumero());
                        jPBEstado.setValue(0);
                        procesoEjecutando = null; // Limpiar el procesoEjecutando
                    }
                }
            }
        }
    }

    /*El método Dormir() introduce un retraso para simular el tiempo de procesamiento.*/
    public void Dormir() {
        try {
            Thread.sleep(700); //Dormir sistema
        } catch (InterruptedException ex) {
            Logger.getLogger(Procesar.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /*El método Cargar() carga los detalles del proceso desde la tabla.*/
    public void Cargar(int i) { //Carga los valores de la Tabla
        NProceso = (int) jTIngreso.getValueAt(i, 0);
        Rafaga = parseInt((String) (jTIngreso.getValueAt(i, 1)));
        Quantum = parseInt((String) (jTIngreso.getValueAt(i, 2)));
        ResiduoRafaga = parseInt((String) (jTIngreso.getValueAt(i, 3)));

        if (NProceso > 0) {
            jLNumeroProceso.setText(String.valueOf(NProceso));
        }
    }

    /*El método Ingresar() agrega un nuevo proceso a la tabla y lo encola en la cola de prioridad.*/
    public void Ingresar() { //Ingresar proceso a la tabla
        DefaultTableModel modelo = (DefaultTableModel) jTIngreso.getModel();

        Proceso nuevoProceso = new Proceso(Contador, Integer.parseInt(jTFCapturaRafaga.getText()), Integer.parseInt(jTFCapturaQuantum.getText()));
        colaProcesos.offer(nuevoProceso);

        Contador++;
        Object[] miTabla = new Object[5];
        miTabla[0] = Contador;
        miTabla[1] = jTFCapturaRafaga.getText();
        miTabla[2] = jTFCapturaQuantum.getText();
        miTabla[3] = jTFCapturaRafaga.getText();
        miTabla[4] = "Listo";
        modelo.addRow(miTabla);
        jTIngreso.setModel(modelo);
        jTFCapturaRafaga.setText(null);
        jTFCapturaRafaga.grabFocus();
    }

    /*El método Informe() actualiza la tabla de procesos finales y muestra el tiempo de ejecución de cada proceso.*/
    public void Informe(int c) {
        DefaultTableModel modelo2 = (DefaultTableModel) jTFinal.getModel();
        Object[] miTabla = new Object[5];
        miTabla[0] = c + 1;
        miTabla[1] = procesoEjecutando.getRafaga();
        miTabla[2] = procesoEjecutando.getQuantum();
        miTabla[3] = TiempoProceso + " Segundos";
        miTabla[4] = "Terminado";
        modelo2.addRow(miTabla);
        jTFinal.setModel(modelo2);
        CantidadProcesos++;
        jLCantidadProcesos.setText(String.valueOf(CantidadProcesos + " Terminados"));
        jLCantidadTiempo.setText(String.valueOf(TiempoProceso + " Segundos"));
    }

    /*El método Borrar() elimina los detalles de un proceso finalizado de la tabla de entrada.*/
    public void Borrar(int c) { //Elimina los registros de la tabla procesos
        jTIngreso.setValueAt(0, c, 0);
        jTIngreso.setValueAt("0", c, 1);
        jTIngreso.setValueAt("0", c, 2);
        jTIngreso.setValueAt("0", c, 3);
        jTIngreso.setValueAt("******", c, 4);
    }

    /*El método Barra() calcula y actualiza el progreso de la barra de progreso.*/
    public void Barra(int rafaga, int residuo) { //Calcula porcentaje de la barra y su progreso
        int Rafaga = rafaga;
        int valor = 100 / rafaga;
        int porcentaje = 100 - (valor * residuo);
        ValorBarra = porcentaje;
        jLPorcentajeProceso.setText(String.valueOf(ValorBarra + "%"));
    }

    /*El método Pintar() actualiza la interfaz de usuario con el estado actual de la barra de progreso.*/
    public void Pintar() {
        jPBEstado.setValue(ValorBarra);
        jPBEstado.repaint();
    }

    /*El método Iniciar() oculta los componentes de entrada para evitar cambios durante la ejecución de los procesos.*/
    public void Iniciar() { //Inicia la secuencia de procesos
        jLabel2.setVisible(false);
        jLabel1.setVisible(false);
        jTFCapturaRafaga.setVisible(false);
        jTFCapturaQuantum.setVisible(false);
        jBAgregar.setVisible(false);
        jBIniciar.setVisible(false);
    }

    /*La clase interna Proceso representa un proceso con atributos como número, tiempo de ráfaga, 
tiempo de quantum y tiempo de ráfaga restante. Implementa la interfaz Comparable para la comparación 
de prioridad.*/
    public class Proceso implements Comparable<Proceso> {

        private int numero;
        private int rafaga;
        private int quantum;
        private int residuoRafaga;

        public Proceso(int numero, int rafaga, int quantum) {
            this.numero = numero;
            this.rafaga = rafaga;
            this.quantum = quantum;
            this.residuoRafaga = rafaga;
        }

        public int getNumero() {
            return numero;
        }

        public int getRafaga() {
            return rafaga;
        }

        public int getQuantum() {
            return quantum;
        }

        public int getResiduoRafaga() {
            return residuoRafaga;
        }

        @Override
        public int compareTo(Proceso otro) {
            return Integer.compare(this.quantum, otro.quantum);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fonfo;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBIniciar;
    private javax.swing.JTextField jLCantidadProcesos;
    private javax.swing.JTextField jLCantidadTiempo;
    private javax.swing.JTextField jLNumeroProceso;
    private javax.swing.JTextField jLPorcentajeProceso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JProgressBar jPBEstado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTFCapturaQuantum;
    private javax.swing.JTextField jTFCapturaRafaga;
    private javax.swing.JTable jTFinal;
    private javax.swing.JTable jTIngreso;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
